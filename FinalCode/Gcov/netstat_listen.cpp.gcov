        -:    0:Source:netstat_listen.cpp
        -:    1:#include<netstat_listen.h>
        -:    2:#include <client.h>
        -:    3:#include <server.h>
        -:    4:
    #####:    5:void getListen() //piping two process to perform pipe operation and capture the output of command
        -:    6:{
        -:    7:	int fd[2];
    #####:    8:	if(pipe(fd) == -1)
        -:    9:	{
    #####:   10:		return perror("pipe");
        -:   11:	}
    #####:   12:	int pid1=fork();
    #####:   13:	if(pid1==0)
        -:   14:	{
    #####:   15:		dup2(fd[1],STDOUT_FILENO);
        -:   16:
    #####:   17:		close(fd[0]);
    #####:   18:		close(fd[1]);
        -:   19:
    #####:   20:		char* cmd="netstat";
    #####:   21:		char *args[]={"netstat","-tanp",NULL};
    #####:   22:		cl<<"WARNING : String to Const char*"<<endl;
    #####:   23:		execvp(cmd,args);
    #####:   24:		exit(EXIT_SUCCESS);
        -:   25:	}
    #####:   26:	int pid2=fork();
    #####:   27:	if(pid2==0)
        -:   28:	{
    #####:   29:		dup2(fd[0],STDIN_FILENO);
    #####:   30:		close(fd[0]);
    #####:   31:		close(fd[1]);
        -:   32:
    #####:   33:		int file=open("listen_File.txt",O_WRONLY | O_CREAT ,0777);
    #####:   34:        dup2(file,STDOUT_FILENO);
    #####:   35:        close(file);
        -:   36:
        -:   37:
    #####:   38:		char *cmd="grep";
    #####:   39:		char *args[]={"grep","-i","LISTEN",NULL};
    #####:   40:		execvp(cmd,args);
    #####:   41:		exit(EXIT_SUCCESS);
        -:   42:	}
        -:   43:		
    #####:   44:		close(fd[0]);
    #####:   45:		close(fd[1]);
        -:   46:		
    #####:   47:		waitpid(pid1,NULL,0);
    #####:   48:        waitpid(pid2,NULL,0);
    #####:   49:        sl<<"WARNING : String to Const char*"<<endl;	
    #####:   50:		sl<<"INFO : Listen File Created"<<endl;
        -:   51:}
        -:   52:
    #####:   53:string storeListen()  //read each records from file and return a appended string seperated by |
        -:   54:{
    #####:   55:	sl<<"INFO :In StoreListen"<<endl;
    #####:   56:	getListen();
    #####:   57:	fstream fs;
    #####:   58:	string totalData;
    #####:   59:	fs.open("listen_File.txt",ios::in|ios::out);
    #####:   60:	if(!fs)
        -:   61:	{
    #####:   62:		 cout<<"No such File"<<endl;
        -:   63:	}
        -:   64:	else
        -:   65:	{
    #####:   66:		string line;				//reading each record to append it
    #####:   67:		while(getline(fs,line))
        -:   68:		{
    #####:   69:				totalData+=line+"|";
        -:   70:		}
    #####:   71:	}
    #####:   72:	fs.close();
    #####:   73:	return totalData;
        -:   74:	sl<<"INFO :Ended StoreListen"<<endl;
    #####:   75:}
    #####:   76:void listendriver(string listenData) //main driver dunc responsible for execution
        -:   77:{
    #####:   78:	cl<<"INFO : In listenDriver "<<endl;
    #####:   79:	list<string> myData;
        -:   80:	char data[7][20];
        -:   81:
    #####:   82:		string record;
    #####:   83:		stringstream str(listenData);			//breaking the appended data and store it in STL
    #####:   84:		while(getline(str,record,'|'))
        -:   85:		{
    #####:   86:			myData.push_back(record);
        -:   87:		}
        -:   88:
    #####:   89:		int size=myData.size();
    #####:   90:		int i=0;
    #####:   91:		netstat_Listen ls[size];
        -:   92:
    #####:   93:		for(auto it=myData.begin();it!=myData.end();it++)
        -:   94:		{
    #####:   95:			string str=*it;
    #####:   96:			stringstream st(str);
    #####:   97:			string temp;
    #####:   98:			int j=0;
    #####:   99:			while(st)
        -:  100:			{
    #####:  101:				st>>temp;
    #####:  102:				if(st)
        -:  103:				{
    #####:  104:					strcpy(data[j],temp.c_str());			//parsing again to store into different attributes
    #####:  105:					j++;
        -:  106:				}
        -:  107:			}
    #####:  108:			ls[i].setProto(data);
    #####:  109:			ls[i].setRecv(data);
    #####:  110:			ls[i].setSend(data);
    #####:  111:			ls[i].setLocal_Address(data);
    #####:  112:			ls[i].setForeign_Address(data);
    #####:  113:			ls[i].setState(data);
    #####:  114:			ls[i].setOthers(data);
        -:  115:
    #####:  116:			i++;
    #####:  117:		}
        -:  118:
    #####:  119:		for(int i=0;i<size;i++)   //displaying records
        -:  120:		{
    #####:  121:			cout<<"-------------- Kernel TCP Table with Listen state dataset "<<i+1<<" ------------------"<<endl;
    #####:  122:			cout<<"\tProto :"<<ls[i].getProto()<<endl;
    #####:  123:			cout<<"\tRecv-Q :"<<ls[i].getRecv()<<endl;
    #####:  124:			cout<<"\tSend-Q :"<<ls[i].getSend()<<endl;
    #####:  125:			cout<<"\tLocal Address :"<<ls[i].getLocal_Address()<<endl;
    #####:  126:			cout<<"\tForeign Address :"<<ls[i].getForeign_Address()<<endl;
    #####:  127:			cout<<"\tState :"<<ls[i].getState()<<endl;
    #####:  128:			cout<<"\tOthers :"<<ls[i].getOthers()<<endl;
    #####:  129:			cout<<"----------------------------------------------------------"<<endl;
        -:  130:		}
        -:  131:
    #####:  132:			cl<<"INFO : Ended listenDriver execution "<<endl;
        -:  133:		
    #####:  134:}
        -:  135:
    #####:  136:netstat_Listen :: netstat_Listen()
    #####:  137:{}
        -:  138:
    #####:  139:void netstat_Listen:: setProto(char data[][20])
        -:  140:{
    #####:  141:	Proto = data[0];
    #####:  142:}
    #####:  143:string netstat_Listen:: getProto()
        -:  144:{
    #####:  145:	return Proto;
        -:  146:}
    #####:  147:void netstat_Listen :: setRecv(char data[][20])
        -:  148:{
    #####:  149:	Recv=data[1];
    #####:  150:}
    #####:  151:string netstat_Listen :: getRecv()
        -:  152:{
    #####:  153:	return Recv;
        -:  154:}
    #####:  155:void netstat_Listen:: setSend(char data[][20])
        -:  156:{
    #####:  157:	 Send=data[2];
    #####:  158:}
    #####:  159:string netstat_Listen :: getSend()
        -:  160:{
    #####:  161:	return Send;
        -:  162:}
    #####:  163:void netstat_Listen :: setLocal_Address(char data[][20])
        -:  164:{
    #####:  165:	Local_Address=data[3];
    #####:  166:}
    #####:  167:string netstat_Listen :: getLocal_Address()
        -:  168:{
    #####:  169:	return Local_Address;
        -:  170:}
    #####:  171:void netstat_Listen :: setForeign_Address(char data[][20])
        -:  172:{
    #####:  173:	Foreign_Address=data[4];
    #####:  174:}
    #####:  175:string netstat_Listen :: getForeign_Address()
        -:  176:{
    #####:  177:	return Foreign_Address;
        -:  178:}
    #####:  179:void netstat_Listen :: setState(char data[][20])
        -:  180:{
    #####:  181:	State=data[5];
    #####:  182:}
    #####:  183:string netstat_Listen :: getState()
        -:  184:{
    #####:  185:	return State;
        -:  186:}
    #####:  187:void netstat_Listen :: setOthers(char data[][20])
        -:  188:{
    #####:  189:	Others=data[6];
    #####:  190:}
    #####:  191:string netstat_Listen :: getOthers()
        -:  192:{
    #####:  193:	return Others;
        -:  194:}
    #####:  195:netstat_Listen ::~netstat_Listen()
    #####:  196:{}
        -:  197:
