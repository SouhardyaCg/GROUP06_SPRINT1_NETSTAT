        -:    0:Source:netstat_udp.cpp
        -:    1:#include<netstat_udp.h>
        -:    2:#include<client.h>
        -:    3:#include <server.h>
        -:    4:
    #####:    5:void getUDP_Table() //Capture the output of the commands in a file
        -:    6:{
    #####:    7:	if(fork()==0)
        -:    8:	{
        -:    9:	
    #####:   10:		int file=open("udpFile.txt",O_WRONLY | O_CREAT ,0777);
    #####:   11:		dup2(file,STDOUT_FILENO); //copyning from one FD to Other
    #####:   12:		close(file);
    #####:   13:		char* cmd="netstat";
    #####:   14:		char *args[]={"netstat","-uan",NULL};	
    #####:   15:		sl<<"WARNING : String to Const char*"<<endl;
    #####:   16:		sl<<"INFO : UDP File Created"<<endl;
    #####:   17:		execvp(cmd,args);
    #####:   18:		exit(EXIT_SUCCESS);
        -:   19:	}
        -:   20:	
    #####:   21:}
        -:   22:
    #####:   23:string storeUDP_Table()  //read each records from file and return a appended string seperated by |
        -:   24:{
    #####:   25:	sl<<"INFO :In StoreUDPTable"<<endl;
    #####:   26:	getUDP_Table();
    #####:   27:	fstream fs;
    #####:   28:	string totalData;
    #####:   29:	fs.open("udpFile.txt",ios::in|ios::out);
    #####:   30:	if(!fs)
        -:   31:	{
    #####:   32:		cout<<"No such File"<<endl;
        -:   33:	}
        -:   34:	else
        -:   35:	{
    #####:   36:		int count =0;
    #####:   37:		string line;
    #####:   38:		while(getline(fs,line)) //reading the records and appending
        -:   39:		{
    #####:   40:			count++;
    #####:   41:			if(count>2)
    #####:   42:				totalData+=line+"|";
        -:   43:			else
    #####:   44:				continue;
        -:   45:		}
    #####:   46:	}
    #####:   47:	fs.close();
    #####:   48:	return totalData;
        -:   49:	sl<<"INFO :Ended StoreUDPTable"<<endl;
    #####:   50:}
    #####:   51:void UDPdriver(string udpData)			//main driver function responsible for execution
        -:   52:{
    #####:   53:	cl<<"INFO :In TCPdriver Execution"<<endl;
    #####:   54:	list<string> myData;
        -:   55:	char data[6][20];
        -:   56:
    #####:   57:		string record;
    #####:   58:		stringstream str(udpData);
    #####:   59:		while(getline(str,record,'|'))
        -:   60:		{
    #####:   61:			myData.push_back(record);
        -:   62:		}
        -:   63:
    #####:   64:		int size=myData.size();
    #####:   65:		int i=0;
    #####:   66:		netstatUDP udp[size];
        -:   67:
    #####:   68:		for(auto it=myData.begin();it!=myData.end();it++)
        -:   69:		{
    #####:   70:			string str=*it;
    #####:   71:			stringstream st(str);
    #####:   72:			string temp;
    #####:   73:			int j=0;
    #####:   74:			while(st)				//parsing again to store each attributes
        -:   75:			{
    #####:   76:				st>>temp;
    #####:   77:				if(st)
        -:   78:				{
    #####:   79:					strcpy(data[j],temp.c_str());
    #####:   80:					j++;
        -:   81:				}
        -:   82:			}
    #####:   83:			udp[i].setProto(data);
    #####:   84:			udp[i].setRecv(data);
    #####:   85:			udp[i].setSend(data);
    #####:   86:			udp[i].setLocal_Address(data);
    #####:   87:			udp[i].setForeign_Address(data);
    #####:   88:			udp[i].setState(data);
        -:   89:
    #####:   90:			i++;
    #####:   91:		}
        -:   92:
    #####:   93:		for(int i=0;i<size;i++)  //displaying
        -:   94:		{
    #####:   95:			cout<<"-------------- Kernel UDP Table Dataset "<<i+1<<" ------------------"<<endl;
    #####:   96:			cout<<"\tProto :"<<udp[i].getProto()<<endl;
    #####:   97:			cout<<"\tRecv-Q :"<<udp[i].getRecv()<<endl;
    #####:   98:			cout<<"\tSend-Q :"<<udp[i].getSend()<<endl;
    #####:   99:			cout<<"\tLocal Address :"<<udp[i].getLocal_Address()<<endl;
    #####:  100:			cout<<"\tForeign Address :"<<udp[i].getForeign_Address()<<endl;
    #####:  101:			cout<<"\tState :"<<udp[i].getState()<<endl;
    #####:  102:			cout<<"-----------------------------------------------------"<<endl;
        -:  103:		}
        -:  104:
    #####:  105:			cl<<"INFO :Ended TCPdriver Execution"<<endl;
    #####:  106:}
        -:  107:
    #####:  108:netstatUDP :: netstatUDP()
    #####:  109:{}
        -:  110:
    #####:  111:void netstatUDP :: setProto(char data[][20])
        -:  112:{
    #####:  113:	Proto=data[0];	
    #####:  114:}
    #####:  115:string netstatUDP :: getProto()
        -:  116:{
    #####:  117:	return Proto;
        -:  118:}
    #####:  119:void netstatUDP :: setRecv(char data[][20])
        -:  120:{
    #####:  121:	Recv=data[1];
    #####:  122:}
    #####:  123:string netstatUDP :: getRecv()
        -:  124:{
    #####:  125:	return Recv;
        -:  126:}
    #####:  127:void netstatUDP :: setSend(char data[][20])
        -:  128:{
    #####:  129:	Send=data[2];
    #####:  130:}
    #####:  131:string netstatUDP :: getSend()
        -:  132:{
    #####:  133:	return Send;
        -:  134:}
    #####:  135:void netstatUDP :: setLocal_Address(char data[][20])
        -:  136:{
    #####:  137:	Local_Address=data[3];
    #####:  138:}
    #####:  139:string netstatUDP :: getLocal_Address()
        -:  140:{
    #####:  141:	return Local_Address;
        -:  142:}
    #####:  143:void netstatUDP :: setForeign_Address(char data[][20])
        -:  144:{
    #####:  145:	Foreign_Address=data[4];
    #####:  146:}
    #####:  147:string netstatUDP :: getForeign_Address()
        -:  148:{
    #####:  149:	return Foreign_Address;
        -:  150:}
    #####:  151:void netstatUDP :: setState(char data[][20])
        -:  152:{
    #####:  153:	State=data[5];
    #####:  154:}
    #####:  155:string netstatUDP :: getState()
        -:  156:{
    #####:  157:	return State;
        -:  158:}
    #####:  159:netstatUDP::~netstatUDP()
    #####:  160:{}
